#!/bin/sh
# postinst script for onlyoffice
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

. /usr/share/debconf/confmodule

DIR="/var/www/onlyoffice"
LOG_DIR="/var/log/onlyoffice"
OLD_VERSION="$2"

DB_HOST=""
DB_USER=""
DB_PWD=""
DB_NAME=""

install_db(){
	db_get onlyoffice-communityserver/db-host || true
	DB_HOST="$RET"
	db_get onlyoffice-communityserver/db-user || true
	DB_USER="$RET"
	db_get onlyoffice-communityserver/db-pwd || true
	DB_PWD="$RET"
	db_get onlyoffice-communityserver/db-name || true
	DB_NAME="$RET"

	MYSQL="mysql -h$DB_HOST -u$DB_USER"
	if [ -n "$DB_PWD" ]; then
		MYSQL="$MYSQL -p$DB_PWD"
	fi

	sed "s/#max_connections.*/max_connections = 1000/" -i /etc/mysql/my.cnf || true # ignore errors

	CNF_PATH="/etc/mysql/mysql.conf.d/mysqld.cnf";
	CNF_SERVICE_PATH="/lib/systemd/system/mysql.service";

	if mysql -V | grep -q "MariaDB"; then
		CNF_PATH="/etc/mysql/mariadb.conf.d/50-server.cnf";
		CNF_SERVICE_PATH="/lib/systemd/system/mariadb.service";
	fi


	if [ -e ${CNF_PATH} ]; then
	    if ! grep -q "^sql_mode" ${CNF_PATH}; then
        	sed "/\[mysqld\]/a sql_mode = 'NO_ENGINE_SUBSTITUTION'" -i ${CNF_PATH} # disable new STRICT mode in mysql 5.7
	    else
		sed "s/sql_mode.*/sql_mode = 'NO_ENGINE_SUBSTITUTION'/" -i ${CNF_PATH} || true # ignore errors
            fi

	    if ! grep -q "^max_connections"  ${CNF_PATH}; then
        	sed '/\[mysqld\]/a max_connections = 1000' -i ${CNF_PATH}
	    else
		sed "s/max_connections.*/max_connections = 1000/" -i ${CNF_PATH} || true # ignore errors
	    fi

	    if ! grep -q "^max_allowed_packet"  ${CNF_PATH}; then
        	sed '/\[mysqld\]/a max_allowed_packet = 1048576000' -i ${CNF_PATH}
	    else
		sed "s/max_allowed_packet.*/max_allowed_packet = 1048576000/" -i ${CNF_PATH} || true # ignore errors
	    fi

	    if [ -e ${CNF_SERVICE_PATH} ]; then
                if ! grep -q "^LimitNOFILE"  ${CNF_SERVICE_PATH}; then
                        sed '/\[Service\]/a LimitNOFILE = infinity' -i ${CNF_SERVICE_PATH}
                else
                        sed "s/LimitNOFILE.*/LimitNOFILE = infinity/" -i ${CNF_SERVICE_PATH} || true # ignore errors
                fi

                if ! grep -q "^LimitMEMLOCK"  ${CNF_SERVICE_PATH}; then
                        sed '/\[Service\]/a LimitMEMLOCK = infinity' -i ${CNF_SERVICE_PATH}
                else
                        sed "s/LimitMEMLOCK.*/LimitMEMLOCK = infinity/" -i ${CNF_SERVICE_PATH} || true # ignore errors
                fi

                systemctl daemon-reload
            
	    fi
	fi

	$MYSQL -e ";" >/dev/null 2>&1 || ( service mysql start >/dev/null 2>&1 && $MYSQL -e ";" >/dev/null )

        if [ "${DB_USER}" = "root" ]; then
       	   # allow MySql.Data.dll connect via mysql_native_password with root and empty password
           $MYSQL -D "mysql" -e "UPDATE user SET plugin='mysql_native_password' WHERE user='${DB_USER}' and host='localhost';"
	fi

	service mysql restart

	# hack for Debian 9 (mariadb)
	if [ -n "${DB_PWD}" ] && [ "${DB_USER}" = "root" ] && mysql -e ";" >/dev/null 2>&1; then

mysql <<EOF
UPDATE mysql.user SET Password=PASSWORD("${DB_PWD}") WHERE User="${DB_USER}";
FLUSH PRIVILEGES;
EOF
	fi

	$MYSQL -e "CREATE DATABASE IF NOT EXISTS $DB_NAME CHARACTER SET utf8 COLLATE 'utf8_general_ci';"

	DB_TABLES_COUNT=$($MYSQL --silent --skip-column-names -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='${DB_NAME}'");

	if [ "${DB_TABLES_COUNT}" -eq "0" ]; then
	
		$MYSQL "$DB_NAME" < $DIR/Sql/onlyoffice.sql
		$MYSQL "$DB_NAME" < $DIR/Sql/onlyoffice.data.sql
		$MYSQL "$DB_NAME" < $DIR/Sql/onlyoffice.resources.sql

	fi
	
	for i in $(ls $DIR/Sql/onlyoffice.upgrade*); do
	        $MYSQL "$DB_NAME" < ${i};
	done

	
}

apply_connection_string(){
	if [ "$DB_HOST" != "localhost" ] || [ "$DB_NAME" != "onlyoffice" ] || [ "$DB_USER" != "root" ] || [ "$DB_PWD" != "" ]; then
		find "$DIR/" -type f -name "*.[cC]onfig" -exec sed -i "s/connectionString=.*/connectionString=\"Server=$DB_HOST;Database=$DB_NAME;User ID=$DB_USER;Password=$DB_PWD;Pooling=true;Character Set=utf8;AutoEnlist=false\" providerName=\"MySql.Data.MySqlClient\"\/>/" {} \;
	fi
}

upgrade_storage(){
	if [ -d $DIR/WebStudio/Products/Community/Modules/Blogs/data ]; then
		mkdir -p $DIR/Data/Products/Community/Modules/Blogs/Data
		cp -R -u $DIR/WebStudio/Products/Community/Modules/Blogs/data/. $DIR/Data/Products/Community/Modules/Blogs/Data
	fi
	if [ -d $DIR/WebStudio/Products/Community/Modules/Forum/data ]; then
		mkdir -p $DIR/Data/Products/Community/Modules/Forum/Data
		cp -R -u $DIR/WebStudio/Products/Community/Modules/Forum/data/. $DIR/Data/Products/Community/Modules/Forum/Data
	fi
	if [ -d $DIR/WebStudio/Products/Community/Modules/News/data ]; then
		mkdir -p $DIR/Data/Products/Community/Modules/News/Data
		cp -R -u $DIR/WebStudio/Products/Community/Modules/News/data/. $DIR/Data/Products/Community/Modules/News/Data
	fi
	if [ -d $DIR/WebStudio/Products/Community/Modules/Bookmarking/data ]; then
		mkdir -p $DIR/Data/Products/Community/Modules/Bookmarking/Data
		cp -R -u $DIR/WebStudio/Products/Community/Modules/Bookmarking/data/. $DIR/Data/Products/Community/Modules/Bookmarking/Data
	fi
	if [ -d $DIR/WebStudio/Products/Community/Modules/Wiki/data ]; then
		mkdir -p $DIR/Data/Products/Community/Modules/Wiki/Data
		cp -R -u $DIR/WebStudio/Products/Community/Modules/Wiki/data/. $DIR/Data/Products/Community/Modules/Wiki/Data
	fi
	if [ -d $DIR/Data/Files ]; then
		mkdir -p $DIR/Data/Products
		cp -R -u $DIR/Data/Files $DIR/Data/Products
	fi
	if [ -d $DIR/WebStudio/Products/CRM/data ]; then
		mkdir -p $DIR/Data/Products/CRM/Data
		cp -R -u $DIR/WebStudio/Products/CRM/data/. $DIR/Data/Products/CRM/Data
	fi
	if [ -d $DIR/WebStudio/Products/Projects/data ]; then
		mkdir -p $DIR/Data/Products/Projects/Data
		cp -R -u $DIR/WebStudio/Products/Projects/data/. $DIR/Data/Products/Projects/Data
	fi
	if [ -d $DIR/WebStudio/data ]; then
		mkdir -p $DIR/Data/Studio
		cp -R -u $DIR/WebStudio/data/. $DIR/Data/Studio
	fi
	if [ -d $DIR/WebStudio/addons/mail/data ]; then
		mkdir -p $DIR/Data/addons/mail/Data
		cp -R -u $DIR/WebStudio/addons/mail/data/. $DIR/Data/addons/mail/Data
	fi
	if [ -d $DIR/WebStudio/addons/mail/Data ]; then
		mkdir -p $DIR/Data/addons/mail/Data
		cp -R -u $DIR/WebStudio/addons/mail/Data/. $DIR/Data/addons/mail/Data
	fi
	if [ -d $DIR/Data/Mail/Aggregator ]; then
		mkdir -p $DIR/Data/addons/mail/Data/aggregator
		cp -R -u $DIR/Data/Mail/Aggregator/. $DIR/Data/addons/mail/Data/aggregator
	fi
	if [ -d $DIR/WebStudio/addons/talk/Data/upload ]; then
		mkdir -p $DIR/Data/addons/talk/Data
		cp -R -u $DIR/WebStudio/addons/talk/Data/upload/. $DIR/Data/addons/talk/Data
	fi
	if [ -d $DIR/bundle ]; then
		mkdir -p $DIR/Data/bundle
		cp -rf $DIR/bundle/* $DIR/Data/bundle/
	fi
}

case "$1" in
	configure)
		adduser --quiet --home $DIR --system --group onlyoffice
		usermod -aG onlyoffice,www-data onlyoffice

		install_db
		apply_connection_string

		mkdir -p /etc/mono/registry/LocalMachine
		mkdir -p /usr/share/.mono/keypairs
		mkdir -p $LOG_DIR
		mkdir -p "$DIR/Data"
		mkdir -p "$DIR/DocumentServerData"
		mkdir -p /var/cache/nginx/onlyoffice
		mkdir -p /var/run/onlyoffice

		# needed for signalr service
                mkdir -p -m 700 "$DIR/.config/.mono/keypairs"

		upgrade_storage

		chown onlyoffice:onlyoffice -R $DIR
		chown onlyoffice:onlyoffice -R $LOG_DIR
		chown www-data:www-data -R /var/cache/nginx/onlyoffice
		chown onlyoffice:www-data -R /var/run/onlyoffice
		chmod g+s+w /var/run/onlyoffice

		# import common ssl certificates
		mozroots --import --sync --machine --quiet

		# configure ngninx for onlyoffice
		rm -f /etc/nginx/sites-enabled/default
		rm -f /etc/nginx/sites-enabled/onlyoffice-apisystem

		# disable apparmor mysql. need for best perfomance mysql
		if which apparmor_parser && [ ! -f /etc/apparmor.d/disable/usr.sbin.mysqld ]; then
			ln -sf /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/disable/
			apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld
		fi

		if [ -d /etc/apport/blacklist.d ] && [ ! -f /etc/apport/blacklist.d/onlyoffice ]; then
cat > /etc/apport/blacklist.d/onlyoffice <<END
/usr/lib/hyperfastcgi/4.0/HyperFastCgi.exe
/usr/lib/mono/4.5/mono-service.exe
END
			service apport restart

		fi

		sed -i '1d' /etc/logrotate.d/nginx
                sed '1 i\/var/log/nginx/*.log /var/log/onlyoffice/nginx.*.log {' -i /etc/logrotate.d/nginx

		NGINX_ROOT_DIR="/etc/nginx";
		DOCUMENT_SERVER_PROTOCOL="http";
		DOCUMENT_SERVER_HOST="localhost:8083";
		DOCUMENT_SERVER_API_URL="\/web-apps\/apps\/api\/documents\/api\.js";
		LICENSE_FILE_PATH="/var/www/onlyoffice/Data/license.lic";
		ONLYOFFICE_ROOT_DIR="$DIR/WebStudio";
		CONTROL_PANEL_PORT_80_TCP_ADDR="localhost:8082";
		ONLYOFFICE_SERVICES_DIR="$DIR/Services";
		SERVICE_SSO_AUTH_HOST_ADDR="localhost";
		SERVER_HOST="localhost";


		# setup enterprise

		# setup document server
		if dpkg -l | grep -q "onlyoffice-documentserver"; then
    			cp ${NGINX_ROOT_DIR}/includes/onlyoffice-communityserver-proxy-to-documentserver.conf.template ${NGINX_ROOT_DIR}/includes/onlyoffice-communityserver-proxy-to-documentserver.conf;
    			sed 's,{{DOCUMENT_SERVER_HOST_ADDR}},'"${DOCUMENT_SERVER_PROTOCOL}:\/\/${DOCUMENT_SERVER_HOST}"',' -i ${NGINX_ROOT_DIR}/includes/onlyoffice-communityserver-proxy-to-documentserver.conf;

    			# change web.appsettings link to editor
    			sed '/files\.docservice\.url\.converter/s!\(value\s*=\s*\"\)[^\"]*\"!\1'${DOCUMENT_SERVER_PROTOCOL}':\/\/'${DOCUMENT_SERVER_HOST}'\/ConvertService\.ashx\"!' -i  ${ONLYOFFICE_ROOT_DIR}/web.appsettings.config
    			sed '/files\.docservice\.url\.api/s!\(value\s*=\s*\"\)[^\"]*\"!\1'${DOCUMENT_SERVER_API_URL}'\"!' -i ${ONLYOFFICE_ROOT_DIR}/web.appsettings.config
    			sed '/files\.docservice\.url\.storage/s!\(value\s*=\s*\"\)[^\"]*\"!\1'${DOCUMENT_SERVER_PROTOCOL}':\/\/'${DOCUMENT_SERVER_HOST}'\/FileUploader\.ashx\"!' -i ${ONLYOFFICE_ROOT_DIR}/web.appsettings.config
    			sed '/files\.docservice\.url\.command/s!\(value\s*=\s*\"\)[^\"]*\"!\1'${DOCUMENT_SERVER_PROTOCOL}':\/\/'${DOCUMENT_SERVER_HOST}'\/coauthoring\/CommandService\.ashx\"!' -i ${ONLYOFFICE_ROOT_DIR}/web.appsettings.config

			sed '/files\.docservice\.url\.portal/s!\(value\s*=\s*\"\)[^\"]*\"!\1http:\/\/'${SERVER_HOST}'\"!' -i ${ONLYOFFICE_ROOT_DIR}/web.appsettings.config

    			if ! grep -q "files\.docservice\.url\.command" ${ONLYOFFICE_ROOT_DIR}/web.appsettings.config; then
          			sed '/files\.docservice\.url\.storage/a <add key=\"files\.docservice\.url\.command\" value=\"'${DOCUMENT_SERVER_PROTOCOL}':\/\/'${DOCUMENT_SERVER_HOST}'\/coauthoring\/CommandService\.ashx\" \/>/' -i ${ONLYOFFICE_ROOT_DIR}/web.appsettings.config
    			else
          			sed '/files\.docservice\.url\.command/s!\(value\s*=\s*\"\)[^\"]*\"!\1'${DOCUMENT_SERVER_PROTOCOL}':\/\/'${DOCUMENT_SERVER_HOST}'\/coauthoring\/CommandService\.ashx\"!' -i ${ONLYOFFICE_ROOT_DIR}/web.appsettings.config
    			fi

			sed '/license\.file\.path/s!\(value\s*=\s*\"\)[^\"]*\"!\1'${LICENSE_FILE_PATH}'\"!' -i ${ONLYOFFICE_ROOT_DIR}/web.appsettings.config

		fi

		# setup controlpanel
		if dpkg -l | grep -q "onlyoffice-controlpanel"; then
        		cp ${NGINX_ROOT_DIR}/includes/onlyoffice-communityserver-proxy-to-controlpanel.conf.template ${NGINX_ROOT_DIR}/includes/onlyoffice-communityserver-proxy-to-controlpanel.conf;
			sed 's,{{CONTROL_PANEL_HOST_ADDR}},'"${CONTROL_PANEL_PORT_80_TCP_ADDR}"',' -i ${NGINX_ROOT_DIR}/includes/onlyoffice-communityserver-proxy-to-controlpanel.conf;
			sed 's,{{SERVICE_SSO_AUTH_HOST_ADDR}},'"${SERVICE_SSO_AUTH_HOST_ADDR}"',' -i ${NGINX_ROOT_DIR}/includes/onlyoffice-communityserver-proxy-to-controlpanel.conf;
			sed '/web\.controlpanel\.url/s/\(value\s*=\s*\"\)[^\"]*\"/\1\/controlpanel\/\"/' -i  ${ONLYOFFICE_ROOT_DIR}/web.appsettings.config;
			sed '/web\.controlpanel\.url/s/\(value\s*=\s*\"\)[^\"]*\"/\1\/controlpanel\/\"/' -i ${ONLYOFFICE_SERVICES_DIR}/TeamLabSvc/TeamLabSvc.exe.Config;
		fi

		# end

		# delete monoserve2
		if [ -d $DIR/WebStudio2 ]; then
			service monoserve2 stop;
			rm -frd $DIR/WebStudio2;
			rm -f /etc/hyperfastcgi/monoserve2;
			rm -f /etc/init.d/monoserve2;
			rm -f /etc/god/conf.d/monoserve2;
		fi


		# call db_stop to prevent installation hang
		db_stop

		service nginx restart >/dev/null 2>&1
		service mysql restart >/dev/null 2>&1 || true # ignore errors
	;;

	abort-upgrade|abort-remove|abort-deconfigure)
	;;

	*)
		echo "postinst called with unknown argument \`$1'" >&2
		exit 1
	;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
